import timeit
start = timeit.default_timer()
arr = [0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1, 4,0, 4, 1, 3, 1, 2, 4, 1, 4, 2, 1, 4, 2, 1]
print(len(arr))

arr_sorted = []
arr_count = [0] * (max(arr)+1)

for i in range(len(arr)):
    arr_count[arr[i]] += 1

for i in range(len(arr_count)):
    if arr_count[i]:
        for j in range(arr_count[i]):
            arr_sorted.append(i)

print(arr_sorted)
end = timeit.default_timer()
print(f'{end-start:.5f}')
"""
일정 크기 이하(한자리)정수들의 개수를 세어 정렬
리스트 길이가 길어지니까 확실히 버블정렬보다 빠른 속도를 보여준다
코드 구현은
각 숫자가 등장한 갯수를 숫자마다 세어 dp에 담아서
그 dp를 순회하면서 숫자의 개수만큼 for문으로 append"""